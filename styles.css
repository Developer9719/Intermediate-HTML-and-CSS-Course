header h1 {
    text-align: center;
}

body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
}

/* 
CSS Styles 
- Absoolute Units
    - units that are always the same no matter the viewport size
    - px
- Relative Units
    - units that are relative to the viewport size or other elements
    - em
        - relative to the font-size of the element
        - elements default font size is 16pt, 4em would be 64pt (4 * 16pt)
    - rem
        - relative to the font-size of the root element
        - elements default font size is 16pt, 4rem would be 64pt (4 * 16pt)
- Viewport Units
    - units that are relative to the viewport size
    - vw (viewport width)
    - vh (viewport height)
    - vmin (viewport minimum)
    - vmax (viewport maximum)
*/

/*
More Text Styles
- Fonts
    - Font Stacks
        - A list of fonts to be used for an element
        - The browser will use the first available font based on the fonts installed on the users system
        - Example: font-family: "Helvetica Neue", Arial, sans-serif;
    - Web Fonts
        - can use a font that wont be available on every users device but you need to import it to your project
            - <link rel="preconnect" href="https://fonts.googleapis.com">
            - <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            - <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
            or
            - @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap'); for CSS file
-Text Styles
    - font-style is used to make text italic
    - letter-spacing is used to alter the space between letters
    - line-height is used to set the amount of space above and below inline elements
    - text-transform is used to change the case of text
        - uppercase
        - lowercase
        - capitalize
    - text-shadow is used to add shadow to text
    - ellipsis is used to indicate that text has been truncated
*/

/*
More CSS Properties
- Background
    - background-color is used to set the background color of an element
    - background-image is used to set a background image for an element
    - background-repeat is used to control the repetition of a background image
    - background-position is used to set the position of a background image
    - background-size is used to control the size of a background image
- Border
    - border is used to set the border of an element
    - border-width is used to set the width of a border
    - border-style is used to set the style of a border
    - border-color is used to set the color of a border
    - border-radius is used to set the rounding of the corners of a border
- Box-Shadow
    - box-shadow is used to add shadow to an element
    - box-shadow: h-offset v-offset blur spread color;
    - h-offset is the horizontal offset of the shadow
    - v-offset is the vertical offset of the shadow
    - blur is the blur radius of the shadow
    - spread is the spread radius of the shadow
    - color is the color of the shadow
- Overflow
    - overflow is used to control what happens to content that is too large to fit in an element
    - overflow: visible; is the default value
    - overflow: hidden; will clip the content and hide it
    - overflow: scroll; will add a scrollbar to the element
    - overflow: auto; will add a scrollbar only if the content is too large
- Opacity
    - opacity is used to control the transparency of an element
    - opacity: 0; is fully transparent
    - opacity: 1; is fully opaque
    - opacity: 0.5; is 50% transparent
*/

/*
Advanced CSS Selectors
- Child and Sibling Combinators
    - > is used to select direct children of an element
        - Example: div > p will select all p elements that are direct children of a div element
    - + is used to select the next sibling of an element
        - Example: div + p will select the first p element that is immediately after a div element
    - ~ is used to select all siblings of an element
        - Example: div ~ p will select all p elements that are siblings of a div element
- Pseudo Selectors
    - Dynamic and User Action Pseudo Class Selectors
        - :hover is used to select an element when the user hovers over it
        - :focus is used to select an element when it has focus
        - :active is used to select an element when it is being activated (e.g. clicked on)
        - :link is used to select unvisited links
        - :visited is used to select visited links
    - Structural Pseudo Class Selectors
        - :nth-child(n) is used to select the nth child of an element
        - :first-child is used to select the first child of an element
        - :last-child is used to select the last child of an element
        - :root is used to select the root element of the document
        - :empty is used to select elements that have no children
        - :only-child is used to select elements that are the only child of their parent
    - Pseudo Element Selectors
        - ::before is used to insert content before an element
        - ::after is used to insert content after an element
        - ::first-letter is used to select the first letter of an element
        - ::first-line is used to select the first line of an element
        - ::marker is used to select li element bullets or numbering
        - ::selection is used to select the portion of an element that is selected by the user
- Attribute Selectors
    - [attr] is used to select elements with a specific attribute
    - [attr=value] is used to select elements with a specific attribute value
    - [attr^=value] is used to select elements with an attribute value that starts with a specific string
    - [attr$=value] is used to select elements with an attribute value that ends with a specific string
    - [attr*=value] is used to select elements with an attribute value that contains a specific substring
*/

/* Positioning */
/*
Absolute Positioning
- position: absolute; is used to position an element relative to its nearest positioned ancestor
- The element is removed from the normal document flow
- top, right, bottom, and left properties are used to specify the position
- these elements don't effect the layout of other elements and don't get effected by other elements
Fixed Positioning
- position: fixed; is used to position an element relative to the viewport
- The element is removed from the normal document flow
- top, right, bottom, and left properties are used to specify the position
- these elements don't effect the layout of other elements and don't get effected by other elements
Sticky Positioning
- position: sticky; is used to position an element based on the user's scroll position
- The element is treated as relative until it crosses a specified threshold, then it is treated as fixed
- top, right, bottom, and left properties are used to specify the position
- these elements don't effect the layout of other elements and don't get effected by other elements
Relative
- position: relative; is used to position an element relative to its normal position
- The element is not removed from the normal document flow
- top, right, bottom, and left properties are used to specify the position
- these elements can affect the layout of other elements and can be affected by other elements
*/

/* CSS Functions */
/*
Functions
- IE: rgba();
- any value in CSS with a () beside it
- calc()
    - calc() is a CSS function that allows you to perform calculations to determine CSS property values.
    - It can be used to calculate lengths, percentages, and other values.
    - Example: width: calc(100% - 50px);
- min()
    - min() is a CSS function that allows you to set a minimum value for a CSS property.
    - It can be used to ensure that a property value does not go below a certain threshold.
    - Example: width: min(100%, 50px);
        - This will set the width to 50px if 100% of the parent element's width is greater than 50px.
- max()
    - max() is a CSS function that allows you to set a maximum value for a CSS property.
    - It can be used to ensure that a property value does not go above a certain threshold.
    - Example: width: max(100%, 50px);
        - This will set the width to 100% of the parent element's width if it is less than 50px.
- clamp()
    - clamp() is a CSS function that allows you to set a value that can grow and shrink between a defined minimum and maximum.
    - It can be used to create responsive designs that adapt to different screen sizes.
    - Example: width: clamp(300px, 50%, 800px);
        - This will set the width to 50% of the parent element's width, but not less than 300px or more than 800px.
*/

/* Custom Properties */
/*
Custom Properties 
- aka CSS variables
- work the same as any other programming language variable
- accepts 2 parameters the custom property name and a fallback value
- can be defined using the --custom-property-name syntax
- can be reused throughout the stylesheet
- can be dynamically changed with JavaScript
- can be accessed using the var() function
    - IE: var(--custom-property-name)
- Fallback value
    - property that is used if the custom property is invalid
- Scope
    - declared by the selector
    - can be global or local
    - global variables are available throughout the entire stylesheet and are declared in :root{} which is the same as targeting the html itself
    - local variables are only available within the selector they are declared in   
*/

/* Frameworks and Preprocessors */
/*
- Framework CSS
    - Bootstrap CSS is a type of framework CSS
- CSS Preprocessors
    - SASS and LESS are CSS preprocessors
*/

/* Form Validation */
/*
Styling Form Validations
- target passed and failed styles can be applied using CSS with the :valid and :invalid pseudo-classes
*/

/* CSS Grid */
/* 
Grid Container 
- display: grid;, display: inline-grid;
- Parent element is marked with the class of container and all its child elements
automatically become grid items.
- Grid items are only direct children of the grid container not children of children
- Grid items can also be grid containers though
- Grid track is the space between grid items
    - grid-template-columns
    - grid-template-rows
    - grid-template: 50px 50px 50px / 50px 50px;
        - This will create a grid with 3 rows and 2 columns.
Explicit vs Implicit Grid
- 
*/